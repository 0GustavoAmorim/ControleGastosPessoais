@page "/register"
@inject IAuthService AuthService
@inject NavigationManager NavigationManager

<PageTitle>Register</PageTitle>

<link href="css/register.css" rel="stylesheet" />

<video autoplay loop muted playsinline class="background-video">
    <source src="videos/background.mp4" type="video/mp4" />
</video>
<div class="video-overlay"></div>

<div class="register-wrapper">
    <div class="register-card">
        <button class="btn-voltar" @onclick="@(() => NavigationManager.NavigateTo("/"))">← Voltar</button>

        <h1 class="register-title">Criar Conta</h1>

        @if (ShowErrors)
        {
            <div class="alert alert-danger" role="alert">
                @foreach (var error in Errors)
                {
                    <p>@error</p>
                }
            </div>
        }

        <EditForm Model="RegisterModel" OnValidSubmit="HandleRegistration">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="form-group">
                <label for="email">Email</label>
                <InputText Id="email" class="form-control input-glow" @bind-Value="RegisterModel.Email" />
                <ValidationMessage For="@(() => RegisterModel.Email)" />
            </div>

            <div class="form-group">
                <label for="password">Senha</label>
                <InputText Id="password" type="password" class="form-control input-glow" @bind-Value="RegisterModel.Password" />
                <ValidationMessage For="@(() => RegisterModel.Password)" />
            </div>

            <div class="form-group">
                <label for="confirm-password">Confirmar Senha</label>
                <InputText Id="confirm-password" type="password" class="form-control input-glow" @bind-Value="RegisterModel.ConfirmPassword" />
                <ValidationMessage For="@(() => RegisterModel.ConfirmPassword)" />
            </div>

            <button type="submit" class="btn-neon">Registrar</button>
        </EditForm>
    </div>
</div>

@code {

    private RegisterModel RegisterModel = new RegisterModel();
    private bool ShowErrors;
    private IEnumerable<string> Errors;

    private async Task HandleRegistration()
    {
        ShowErrors = false;

        var result = await AuthService.Register(RegisterModel);

        if (result.Successful)
        {
            NavigationManager.NavigateTo("/login");
        }
        else
        {
            Errors = result.Errors;
            ShowErrors = true;
        }
    }
}
