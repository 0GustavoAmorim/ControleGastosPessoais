@page "/gastos"
@attribute [Authorize]
@inject GastosServices GastosService
@inject CategoriasService CategoriasServices
@inject ISnackbar SnackBar

<MudText Typo="Typo.h3" Align="Align.Center">Registrar Gastos</MudText>

<EditForm Model="@novoGasto"
          OnValidSubmit="@OnValidSubmit">
    <DataAnnotationsValidator />

    <MudGrid>
        <MudItem xs="6">
            <MudTextField Label="Descrição" Class="mt-3" HelperText="Max. 50 caracteres"
                          @bind-Value="novoGasto.Descricao" For="@(() => novoGasto.Descricao)" />
        </MudItem>

        <MudItem xs="6">
            <MudSelect @bind-Value="novoGasto.CategoriaId" Label="Categoria" Class="mt-3" Placeholder="Selecione a Categoria" AdornmentIcon="fa-solid fa-bookmark">
                <MudSelectItem Value="0">Selecione uma categoria</MudSelectItem>
                @foreach (var categoria in categorias.Where(c => c.Id != 1)) // Ocultamos a categoria 1
                {
                    <MudSelectItem Value="@categoria.Id">@categoria.Nome</MudSelectItem>
                }
            </MudSelect>
            <ValidationMessage For="@(() => novoGasto.CategoriaId)" />
        </MudItem>


        <MudItem xs="6">
            <MudNumericField Label="Valor" HelperText="Não pode ser 0(zero)"
                             @bind-Value="novoGasto.Valor" For="@(() => novoGasto.Valor)" />
        </MudItem>

        <MudItem xs="6">
            <MudDatePicker Label="Data" @bind-Date="novoGasto.Data" />
        </MudItem>

        <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">Salvar</MudButton>
    </MudGrid>
</EditForm>

<MudText Typo="Typo.h5" Class="mt-5">Gastos</MudText>

<MudTable @ref="@_table" Items="@listaGastos" RowsPerPage="4" Hover="true" Breakpoint="Breakpoint.Sm" LoadingProgressColor="Color.Info">
    <HeaderContent>
        <MudTh>Id</MudTh>
        <MudTh>Descrição</MudTh>
        <MudTh>Valor</MudTh>
        <MudTh>Categoria</MudTh>
        <MudTh>Data</MudTh>
        <MudTh>Editar</MudTh>
        <MudTh>Excluir</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Id">@context.Id</MudTd>
        <MudTd DataLabel="Descrição">@context.Descricao</MudTd>
        <MudTd DataLabel="Valor">@context.Valor</MudTd>
        <MudTd DataLabel="Categoria">@context.CategoriaNome</MudTd>
        <MudTd DataLabel="Data">@context.Data</MudTd>
        <MudTd>
            <MudButton @onclick="() => ExibirModalEditarGasto(context)">
                <i class="fa-solid fa-pen-to-square" style="color: #FFD43B;"></i>
            </MudButton>
        </MudTd>
        <MudTd>
            <MudButton @onclick="() => ExibirModalConfirmarExclusao(context.Id)">
                <i class="fa-solid fa-trash" style="color: #ff0033;"></i>
            </MudButton>
        </MudTd>
    </RowTemplate>
    <PagerContent>
        <MudPagination SelectedChanged="PageChanged" Count="@((_table.GetFilteredItemsCount() + _table.RowsPerPage - 1) / _table.RowsPerPage)" Class="pa-4 align-center d-flex justify-center" />
    </PagerContent>
</MudTable>

<MudDialog @bind-Visible="exibeModalEditar" MaxWidth="MaxWidth.Medium" FullWidth="true">
    <DialogContent>
        <EditForm Model="@gastoParaEditar" OnValidSubmit="ConfirmaUpdate">
            <DataAnnotationsValidator />

            <MudText Typo="Typo.h6" Class="mb-4"> Editar Gasto</MudText>

            <MudGrid>
                <MudItem xs="12" Class="mb-3">
                    <MudTextField Label="Descrição" HelperText="Max. 50 caracteres"
                                  @bind-Value="gastoParaEditar.Descricao" FullWidth="true" />
                </MudItem>
                <MudItem xs="12" Class="mb-3">
                    <MudSelect @bind-Value="gastoParaEditar.CategoriaId" Label="Categoria" Class="mt-3" Placeholder="Selecione a Categoria" AdornmentIcon="fa-solid fa-bookmark">
                        <MudSelectItem Value="0">Selecione uma categoria</MudSelectItem>
                        @foreach (var categoria in categorias.Where(c => c.Id != 1)) // Ocultamos a categoria 1
                        {
                            <MudSelectItem Value="@categoria.Id">@categoria.Nome</MudSelectItem>
                        }
                    </MudSelect>
                    <ValidationMessage For="@(() => gastoParaEditar.CategoriaId)" />
                </MudItem>
                <MudItem xs="6" Class="mb-3">
                    <MudNumericField Label="Valor" HelperText="Não pode ser 0(zero)"
                                     @bind-Value="gastoParaEditar.Valor" FullWidth="true" />
                </MudItem>
                <MudItem xs="6">
                    <MudDatePicker Label="Data" @bind-Date="gastoParaEditar.Data" />
                </MudItem>
            </MudGrid>
        </EditForm>
    </DialogContent>
    <DialogActions>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="() => ConfirmaUpdate()">Atualizar</MudButton>
        <MudButton Variant="Variant.Filled" Color="Color.Secondary" OnClick="() => exibeModalEditar = false">Cancelar</MudButton>
    </DialogActions>
</MudDialog>


<MudDialog @bind-Visible="exibeModalConfirmarExclusao" MaxWidth="MaxWidth.Small" FullWidth="true">
    <DialogContent>
        <MudText Typo="Typo.h6" Class="mb-4">Tem certeza que deseja excluir este gasto?</MudText>
    </DialogContent>
    <DialogActions>
        <MudButton Variant="Variant.Filled" Color="Color.Error" OnClick="ConfirmarExclusaoGasto">Excluir</MudButton>
        <MudButton Variant="Variant.Filled" Color="Color.Secondary" OnClick="() => exibeModalConfirmarExclusao = false">Cancelar</MudButton>
    </DialogActions>
</MudDialog>


@code {
    private MudTable<GastoResponseDTO>? _table;
    private List<GastoResponseDTO> listaGastos = new();
    private List<CategoriaResponseDTO> categorias = new();
    private GastoRequestDTO novoGasto = new() { Data = DateTime.Now };
    private GastoRequestDTO gastoParaEditar = new();
    private int gastoId;
    private int gastoParaExcluir;
    private bool exibeModalEditar = false;
    private bool exibeModalConfirmarExclusao = false;

    protected override async Task OnInitializedAsync()
    {
        categorias = await CategoriasServices.GetCategorias();
        listaGastos = await GastosService.GetGastos();
        StateHasChanged();
    }

    private async Task OnValidSubmit()
    {
        await SalvarGasto();
    }

    private async Task SalvarGasto()
    {
        if (novoGasto.CategoriaId <= 0)
        {
            novoGasto.CategoriaId = 1;
        }

        await GastosService.AddGasto(novoGasto);
        listaGastos = await GastosService.GetGastos();
        novoGasto = new() { Data = DateTime.Now };
        SnackBar.Configuration.PositionClass = "Top-Center";
        SnackBar.Add("Gasto Cadastrado!!", Severity.Success);
    }

    private void ExibirModalEditarGasto(GastoResponseDTO gasto)
    {
        gastoId = gasto.Id;
        gastoParaEditar = new GastoRequestDTO
            {
                Descricao = gasto.Descricao,
                CategoriaId = categorias.FirstOrDefault(c => c.Nome == gasto.CategoriaNome)?.Id ?? 1,
                Valor = gasto.Valor,
                Data = gasto.Data
            };
        exibeModalEditar = true;
    }

    private async Task ConfirmaUpdate()
    {
        try
        {
            if (string.IsNullOrWhiteSpace(gastoParaEditar.Descricao) || gastoParaEditar.Valor < 0)
            {
                SnackBar.Add("Preencha todos os campos corretamente!", Severity.Warning);
                return;
            }

            await GastosService.UpdateGasto(gastoId, gastoParaEditar);

            listaGastos = await GastosService.GetGastos();
            StateHasChanged();

            SnackBar.Add("Gasto atualizado com sucesso!", Severity.Success);
            exibeModalEditar = false;
        }
        catch (Exception ex)
        {
            SnackBar.Add($"Erro ao atualizar gasto: {ex.Message}", Severity.Error);
        }
    }

    private void ExibirModalConfirmarExclusao(int gastoId)
    {
        gastoParaExcluir = gastoId;
        exibeModalConfirmarExclusao = true;
    }

    private async Task ConfirmarExclusaoGasto()
    {
        await GastosService.DeleteGasto(gastoParaExcluir);
        listaGastos = await GastosService.GetGastos();
        exibeModalConfirmarExclusao = false;
        SnackBar.Add("Gasto excluído com sucesso!", Severity.Success);
    }

    private void PageChanged(int i)
    {
        _table.NavigateTo(i - 1);
    }
}
