@page "/categorias"
@inject CategoriasService CategoriasService
@inject ISnackbar SnackBar

<MudText Typo="Typo.h3" Align="Align.Center">Registrar Categoria</MudText>

<EditForm Model="@novaCategoria"
          OnValidSubmit="@OnValidSubmit">
    <DataAnnotationsValidator />
    <MudGrid>
        <MudItem xs="12">
            <MudTextField Label="Nome da Categoria" Class="mt-3" HelperText="Max. 50 caracteres" 
                          @bind-Value="novaCategoria.Nome" For="@(() => novaCategoria.Nome)"/>
        </MudItem>
            
        <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">Salvar</MudButton>
    </MudGrid>
</EditForm>

<MudText Typo="Typo.h5" Class="mt-5">Categorias</MudText>

<MudTable @ref="@_table" Items="@categorias.Where(c => c.Id != 1)" RowsPerPage="4" Hover="true" Breakpoint="Breakpoint.Sm" LoadingProgressColor="Color.Info">
    <HeaderContent>
        <MudTh>Id</MudTh>
        <MudTh>Categoria</MudTh>
        <MudTh>Editar</MudTh>
        <MudTh>Excluir</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Id">@context.Id</MudTd>
        <MudTd DataLabel="Nome">@context.Nome</MudTd>
        <MudTd DataLabel="Editar" @onclick="() => ExibirModalEditarCategoria(context)">
            <i class="fa-solid fa-pen-to-square" style="color: #FFD43B;"></i>
        </MudTd>
        <MudTd DataLabel="Excluir" @onclick="() => ExcluirCategoria(context.Id)">
            <i class="fa-solid fa-trash" style="color: #ff0033;"></i>
        </MudTd>
    </RowTemplate>
    <PagerContent>
        <MudPagination SelectedChanged="PageChanged" Count="@((_table.GetFilteredItemsCount() + _table.RowsPerPage - 1) / _table.RowsPerPage)" Class="d-flex justify-center pa-4 align-center" />
    </PagerContent>
</MudTable>

<MudDialog @bind-Visible="exibeModalExcluir">
    <DialogContent>
        <MudText Typo="Typo.h6">Você deseja atualizar a categoria dos gastos para uma nova categoria antes de excluir?</MudText>
        <MudSelect @bind-Value="novaCategoriaId" Label="Nova categoria" Class="mt-3"> 
            @foreach(var categoria in categorias.Where(c => c.Id != 1))
            {
                <MudSelectItem Value="@categoria.Id">@categoria.Nome</MudSelectItem>
            }
        </MudSelect>
    </DialogContent>
    <DialogActions>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="ConfirmarExclusao">Sim</MudButton>
        <MudButton Variant="Variant.Filled" Color="Color.Secondary" OnClick="ConfirmarExclusao">Não</MudButton>
    </DialogActions>
</MudDialog>

<MudDialog @bind-Visible="exibeModalEditar">
    <DialogContent>
        <MudText Typo="Typo.h6">Atualizar categoria</MudText>
        <MudItem xs="12">
            <MudTextField Label="Nome da Categoria" Class="mt-3" HelperText="Max. 50 caracteres"
                          @bind-Value="categoriaParaEditar.Nome" For="@(() => categoriaParaEditar.Nome)" />
        </MudItem>
    </DialogContent>
    <DialogActions>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="ConfirmaUpdate">Sim</MudButton>
        <MudButton Variant="Variant.Filled" Color="Color.Secondary" OnClick="() => exibeModalEditar = false">Não</MudButton>
    </DialogActions>
</MudDialog>

@code {
    private List<CategoriaResponseDTO> categorias = new();
    private CategoriaRequestDTO novaCategoria = new();
    private CategoriaRequestDTO categoriaParaEditar = new();
    private MudTable<CategoriaResponseDTO>? _table;

    private bool exibeModalExcluir = false;
    private bool exibeModalEditar = false;
    private int categoriaParaExcluir;
    private int novaCategoriaId;
    private int categoriaId;

    protected override async Task OnInitializedAsync()
    {
        categorias = await CategoriasService.GetCategorias();
        StateHasChanged();
    }

    public async Task OnValidSubmit()
    {
        await SalvarCategoria();

    }

    private async Task SalvarCategoria()
    {
        await CategoriasService.AddCategoria(novaCategoria);
        categorias = await CategoriasService.GetCategorias();
        novaCategoria = new();

    }

    private async Task ExcluirCategoria(int id)
    {
        bool temGastos = await CategoriasService.CategoriaTemGastos(id);
        if (temGastos)
        {
            categoriaParaExcluir = id;
            exibeModalExcluir = true;
        }
        else
        {
            await CategoriasService.DeleteCategoria(id);
            categorias = await CategoriasService.GetCategorias();
            SnackBar.Add("Categoria excluída com sucesso!", Severity.Success);
        }
    }

    private async Task ConfirmarExclusao()
    {
        if (novaCategoriaId > 0)
        {
            await CategoriasService.UpdateGastosCategoria(categoriaParaExcluir, novaCategoriaId);
        }
        else
        {
            await CategoriasService.UpdateGastosCategoria(categoriaParaExcluir, 1);
        }
        await CategoriasService.DeleteCategoria(categoriaParaExcluir);
        exibeModalExcluir = false;
        categorias = await CategoriasService.GetCategorias();
        SnackBar.Add("Categoria excluída com sucesso!", Severity.Success);
    }


    private void ExibirModalEditarCategoria(CategoriaResponseDTO categoria)
    {
        categoriaId = categoria.Id;
        categoriaParaEditar.Nome = categoria.Nome;
        exibeModalEditar = true;
    }

    private async Task ConfirmaUpdate()
    {
        if (string.IsNullOrWhiteSpace(categoriaParaEditar.Nome))
        {
            SnackBar.Add("O nome da categoria não pode estar vazio!", Severity.Warning);
            return;
        }
        try
        {
            await CategoriasService.UpdateCategoria(categoriaId, categoriaParaEditar);
            var categoriaEditada = categorias.FirstOrDefault(c => c.Id == categoriaId);
            if (categoriaEditada != null)
            {
                categoriaEditada.Nome = categoriaParaEditar.Nome;
            }
            
            SnackBar.Add("Categoria atualizada com sucesso!", Severity.Success);
            exibeModalEditar = false;

        }
        catch (Exception ex)
        {
            SnackBar.Add($"Erro ao atualizar a categoria: {ex.Message}", Severity.Error);
        }

    }



    private void PageChanged(int i)
    {
        _table.NavigateTo(i - 1);
    }
}
